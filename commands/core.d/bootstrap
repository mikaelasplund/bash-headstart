#!/usr/bin/env bash
#
# Bootstrap the tool on this machine
#
# Usage:
#   {{go}} {{cmd}} [options]
#
# Options:
#   --force|-f          Re-run bootstrap even if the tool is already
#                       bootstrapped
#
#
# Notes:
#
#   - The `--force` option is useful when you need to recreate project
#     configuration that was accidentally deleted/modified (the files
#     /etc/profile.d/{{go}}.sh and project.conf)
#
#
# Examples:
#
#   Bootstrap the tool:
#     {{go}} {{cmd}}
#
#   Re-run bootstrap:
#     {{go}} {{cmd}} --force

# TODO add version checks
# TODO inform about sudo
# TODO install hydra, msfconsole, etc only if devel

function core_bootstrap_install_command() {
  local command
  command=" \
    cd '\"'$PWD'\"' \&\& \
    eval '\"'\$\('\"$PWD/${0##*/}\"' env $_HEADSTART_CMD\)'\"' \
    \&\& cd - \
    \>/dev/null"

  sudo su -c " \
    echo export HEADSTART_INSTALLATION_DIR='\"'$PWD'\"' \
    >| /etc/profile.d/$_HEADSTART_CMD.sh \
  "

  sudo su -c "echo $command >> /etc/profile.d/$_HEADSTART_CMD.sh"
}

function core_bootstrap_install_dependencies() {
  . "$_GO_USE_MODULES" 'platform'

  info 'installing dependencies...'

  local path
  path="$_HEADSTART_CORE_DIR/commands/core.d/bootstrap.d/$_GO_PLATFORM_ID.sh"
  if [[ -f "$path" ]]; then
    . "$path"
  fi
}

function core_bootstrap_git_lay() {
  . "$_GO_USE_MODULES" 'project'
  local user_role="$(project_get_user_role)"

  info 'layering dependencies with gilt...'
  if [[ -e "$PROJECT_DIR/vendor/gilt.$user_role.yml" ]]; then
    gilt --config "$PROJECT_DIR/vendor/gilt.$user_role.yml" overlay
  elif [[ -e "$PROJECT_DIR/vendor/gilt.yml" ]]; then
    gilt --config "$PROJECT_DIR/vendor/gilt.yml" overlay
  fi
}

function core_bootstrap_ask_passphrase() {
  . "$_GO_USE_MODULES" 'prompt'

  eval "$(ssh-agent -t 30)"

  # TODO do this generic in a loop
  @go.prompt_for_input \
    github_com_key \
    'github.com key path: ' \
    "$HOME/.ssh/id_rsa"

  ssh-add "$github_com_key"

  @go.prompt_for_input \
    kth_github_key \
    'KTH github key path: ' \
    "$HOME/.ssh/id_rsa"

  if [[ "$kth_github_key" != "$github_com_key" ]]; then
    ssh-add "$kth_github_key"
  fi
}

function core_bootstrap_git_hooks() {
  info "Installing git hooks"

  export AUTOHOOK_HOOKS_DIR="$_HEADSTART_CORE_DIR/misc/git/hooks"
  "$_HEADSTART_CORE_DIR/vendor/autohook/autohook.sh" 'install'

  local cmd
  cmd+="echo export "
  cmd+="AUTOHOOK_HOOKS_DIR='\"'$_HEADSTART_CORE_DIR/misc/git/hooks'\"'"
  cmd+=" >> /etc/profile.d/$_HEADSTART_CMD.sh"
  sudo su -c "$cmd"
}

function core_bootstrap_set_version() {
  if [[ ! -e "$_HEADSTART_CORE_LOCK" ]]; then
    mkdir "${_HEADSTART_CORE_LOCK%/*}"
    : >"$_HEADSTART_CORE_LOCK"
  fi

  while read -s line; do
    if [[ "$line" =~ ^version=.* ]]; then
      echo "${BASH_REMATCH[0]}" >|"$_HEADSTART_CORE_LOCK"
    fi
  done <"$PROJECT_DIR/version"
}

# TODO do this generic, load prompts from conf file
function core_bootstrap_configure() {
  @required [boolean] confirm

  . "$_GO_USE_MODULES" "prompt"

  local project_prompt
  local reuse_prompt
  local old_project
  local old_reuse

  if [[ "$confirm" == 'true' && -e "$_HEADSTART_PROJECT_CONFIG" ]]; then
    string="The project has already been configured. "
    string+="Do you want to overwrite the existing configuration?"
    if ! @go.prompt_for_yes_or_no "$string" 'no'; then
      return
    fi

    [[ "$(<"$_HEADSTART_PROJECT_CONFIG")" =~ project\ =\ ([^[:space:]]+) ]]
    old_project="${BASH_REMATCH[1]}"
    project_prompt="ID of Google Cloud project (old value is default): "

    [[ "$(<"$_HEADSTART_PROJECT_CONFIG")" =~ world_reuse\ =\ ([^[:space:]]+) ]]
    old_reuse="${BASH_REMATCH[1]}"
    reuse_prompt="players per world (old value is default): "
  fi

  if [[ ! -e "$_HEADSTART_PROJECT_CONFIG" ]]; then
    mkdir "${_HEADSTART_PROJECT_CONFIG%/*}"
  fi

  echo '[default]' >|"$_HEADSTART_PROJECT_CONFIG"

  project_prompt="${project_prompt-ID of Google Cloud project: }"
  local project=''
  @go.prompt_for_input \
    "project" \
    "$project_prompt" \
    "${old_project-}" \
    '' "${old_project:-required}"

  echo "project = $project" >>"$_HEADSTART_PROJECT_CONFIG"

  reuse_prompt="${reuse_prompt-players per world: }"
  local world_reuse=''
  while [[ ! "$world_reuse" =~ ^[0-9]+$ ]]; do
    @go.prompt_for_input \
      "world_reuse" \
      "$reuse_prompt" \
      "${old_reuse-}" \
      '' "${old_reuse:-required}"
  done

  echo "world_reuse = $world_reuse" >>"$_HEADSTART_PROJECT_CONFIG"

  # TODO do not hardcode this
  echo 'overlord_email = nkak@kth.se' >>"$_HEADSTART_PROJECT_CONFIG"

  . "$_GO_USE_MODULES" 'prompt'

  info "Select your role in the project:"
  local PS3='Select role: '
  @go.select_option 'user_role' 'developer' 'TA'
  echo "user_role = $user_role" >>"$_HEADSTART_PROJECT_CONFIG"
}

function core_bootstrap_lock() {
  echo "status=bootstrapped" >>"$_HEADSTART_CORE_LOCK"
}

function core_bootstrap() {
  local force=false
  local confirm=true

  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      --force | -f)
        force=true
        ;;
      --noconfirm)
        confirm=false
        ;;
      -*)
        abort "unrecognized option: $1" "$_HEADSTART_EC_USAGE"
        ;;
      *)
        abort "unrecognized command: $1" "$_HEADSTART_EC_USAGE"
        ;;
    esac
    shift
  done

  . "$_GO_USE_MODULES" 'installation' 'core'

  if [[ "$(get_installation_status)" == 'bootstrapped' && "$force" == 'false' ]]; then
    warn 'project is already bootstrapped, nothing to do'
    exit
  fi

  mkdir -p "$_HEADSTART_TMP_DIR"

  core_bootstrap_ask_passphrase
  core_bootstrap_configure "$confirm"
  core_bootstrap_install_command
  core_bootstrap_git_hooks
  core_bootstrap_install_dependencies
  # TODO unify git functions
  core_bootstrap_git_lay

  local project_bootstrap_function="${_HEADSTART_CMD}_bootstrap"
  if [[ "$(type -t "$project_bootstrap_function")" == 'function' ]]; then
    "$project_bootstrap_function"
  fi

  # TODO unify these last two functions
  core_bootstrap_set_version
  core_bootstrap_lock

  info 'bootstrap complete'
}

core_bootstrap "$@"
