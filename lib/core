#!/usr/bin/env bash
# TODO merge these 'get' functions into one that accepts the ini key as
# argument
#      and use lib/ini to parse the file

function core_get_installed_version() {
  declare -xg "${_HEADSTART_SCRIPT_NAME~~}_VERSION"
  declare -xg "${_HEADSTART_SCRIPT_NAME~~}_VERSION_MAJOR"
  declare -xg "${_HEADSTART_SCRIPT_NAME~~}_VERSION_MINOR"
  declare -xg "${_HEADSTART_SCRIPT_NAME~~}_VERSION_PATCH"

  if [[ ! -f "$_HEADSTART_CORE_LOCK" ]]; then
    eval "${_HEADSTART_SCRIPT_NAME~~}_VERSION_MAJOR=0"
    eval "${_HEADSTART_SCRIPT_NAME~~}_VERSION_MINOR=0"
    eval "${_HEADSTART_SCRIPT_NAME~~}_VERSION_PATCH=0"
    eval "${_HEADSTART_SCRIPT_NAME~~}_VERSION=0"
    # <<-CODE-NOTE A version of 0 means that the project is not installed yet.
    return
  fi

  while read -s line; do
    if [[ "$line" =~ ^version=([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
      eval "${_HEADSTART_SCRIPT_NAME~~}_VERSION_MAJOR=\"${BASH_REMATCH[1]}\""
      eval "${_HEADSTART_SCRIPT_NAME~~}_VERSION_MINOR=\"${BASH_REMATCH[2]}\""
      eval "${_HEADSTART_SCRIPT_NAME~~}_VERSION_PATCH=\"${BASH_REMATCH[3]}\""
      eval "${_HEADSTART_SCRIPT_NAME~~}_VERSION=\"\$${_HEADSTART_SCRIPT_NAME~~}_VERSION_MAJOR.\$${_HEADSTART_SCRIPT_NAME~~}_VERSION_MINOR.\$${_HEADSTART_SCRIPT_NAME~~}_VERSION_PATCH\""
      break
    fi
  done <"$_HEADSTART_CORE_LOCK"
}

# TODO rename this to core_get_downloaded_version
function core_get_new_version() {
  local version

  while read -s line; do
    if [[ "$line" =~ ^version=(.*) ]]; then
      version="${BASH_REMATCH[1]}"
    fi
  done <"$PROJECT_DIR/version"

  echo "$version"
}

function core_check_upgrades() {
  core_get_installed_version
  downloaded_version="$(core_get_new_version)"

  eval "current_version=${_HEADSTART_SCRIPT_NAME~~}_VERSION"
  if [[ "$current_version" == '0' ]]; then
    return
    # <<-CODE-NOTE A version of 0 means that the project is not installed yet.
  fi

  if [[ "$current_version" != "$downloaded_version" ]] \
    && [[ ! "${1-}" == "core" && "${2-}" == 'upgrade' ]]; then
    msg=("pending upgrades from $current_version to $downloaded_version")
    msg+=("run '$_HEADSTART_CMD core upgrade' first")
    abort "${msg[*]}"
  fi
}

function core_parse_project_config() {
  if [[ ! -r "$_HEADSTART_PROJECT_CONFIG" ]]; then
    # This will happen if we run 'core bootstrap' and this function gets called.
    return
  fi

  local conf
  local value

  while read -s line; do
    if [[ "$line" =~ ^(#|\s*\[|$) ]]; then
      continue
    fi

    conf="${line%%=*}"
    conf="${conf% }"
    value="${line#*=}"
    value="${value# }"

    eval 'declare -gx CONF_'${conf~~}'='"$value"
  done <"$_HEADSTART_PROJECT_CONFIG"
}
